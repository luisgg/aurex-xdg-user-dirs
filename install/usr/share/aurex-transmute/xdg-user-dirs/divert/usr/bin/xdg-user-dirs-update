#!/bin/bash
log(){
	echo -n "$1:" >>/tmp/log 
	shift
	echo "$@" >>/tmp/log
}
LNG="$(set | grep GDM_LANG |sed -e "s#GDM_LANG=\(.*\)#\1#g;s#\(.*\)\.\(.*\)#\1#")"
#log LNG $LNG
TEXTDOMAIN="xdg-user-dirs"
export TEXTDOMAIN

NET_MOUNTED_DIR="$HOME/MisDocumentos_Servidor"
USER_FILES="$NET_MOUNTED_DIR/UserFiles"
USER_FILES_TOKEN_DIR="$HOME/.config/aurex/"
USER_FILES_DIRS="Desktop Downloads Templates Public Documents Music Pictures Videos"

netUserFiles()
{
	GRP_USER="$(id -ng $USER_NAME)"
	NET_HOME="/net/home/$GRP_USER/$USERNAME"
	[ -w "$NET_HOME" ] || return 0
	[ -d "$NET_HOME/UserFiles" ] || mkdir $NET_HOME/UserFiles
	[ -d "$NET_HOME/Desktop" ] || mkdir $NET_HOME/Desktop
	if [ -d "$HOME/UserFiles" -a ! -L "$HOME/UserFiles" ]; then 
		rsync -rltD --backup --suffix=".$(date +%F_%R)" $HOME/UserFiles $NET_HOME/
		rm -rf $HOME/UserFiles
	fi
	if [ -d "$HOME/Desktop" -a ! -L "$HOME/Desktop" ]; then
		rsync -rltD --backup --suffix=".$(date +%F_%R)" $HOME/Desktop $NET_HOME/
		rm -rf $HOME/Desktop 
	fi
	[ -L "$USER_FILES" ] || ln -s $NET_HOME/UserFiles	$HOME/UserFiles
	[ -L "$HOME/Desktop" ] || ln -s $NET_HOME/Desktop	$HOME/Desktop
}

create_user_dirs()
{
	[ -d $HOME/.config ] || mkdir -p $HOME/.config
	cat <<EOF > $HOME/.config/user-dirs.dirs
XDG_DESKTOP_DIR="$HOME/$(LANGUAGE="$LNG" gettext "Desktop")"
XDG_DOWNLOAD_DIR="$HOME/$(LANGUAGE="$LNG" gettext "Downloads")"
XDG_TEMPLATES_DIR="$HOME/$(LANGUAGE="$LNG" gettext "Templates")"
XDG_PUBLICSHARE_DIR="$HOME/$(LANGUAGE="$LNG" gettext "Public")"
XDG_DOCUMENTS_DIR="$HOME/$(LANGUAGE="$LNG" gettext "Documents")"
XDG_MUSIC_DIR="$HOME/$(LANGUAGE="$LNG" gettext "Music")"
XDG_PICTURES_DIR="$HOME/$(LANGUAGE="$LNG" gettext "Pictures")"
XDG_VIDEOS_DIR="$HOME/$(LANGUAGE="$LNG" gettext "Videos")"
EOF

}

update_link() {
	if [ -d "$USER_FILES/$1" ]; then
		# log "creating link" "$UserFiles/$1"
		LOC_DIR="$(LANGUAGE="$LNG" gettext "$1")"
		if [ -h "$2" ] ; then
			# old path is just a link, just delete it
			rm -f "$2"
		elif [ -d "$2" ] ; then
			# old path is a directory, so copy files first
			if rsync -rlt --specials --backup --suffix=".$(date +%F_%R)" "$2/" "$USER_FILES/$1/" ; then
				# remove old dir
				rm -fr "$LOC_DIR"
			fi
		fi
		# let's go to create new link, but first, if exists a directory with the same name, make a backup
		if [ -d "$LOC_DIR" ] ; then
			mv "$LOC_DIR" "${LOC_DIR}.$(date +%F_%R)"
		fi
		ln -s "$USER_FILES/$1" "$LOC_DIR"
		modify_bookmark "$1" "$2"
	fi
}

# Name :check_and_make_dir
# Function : This function check directory exist by other way create directory
# Arguments : directory_path
check_and_make_dir()
{
	NAMDIR="$1"
	[ -d $1 ] || mkdir $1
}

create_nonuserfiles_link() {
	local NAMDIR
	check_and_make_dir $1
	NAMDIR=$(basename $1)
	TRNAMDIR=$(LANGUAGE="$LNG" gettext "$NAMDIR")
	if [ ! -e "$TRNAMDIR" ]; then 
		#log "creating link" "$UserFiles/$1" 
		ln -s "$NAMDIR" "$TRNAMDIR"
		modify_bookmark "$NAMDIR" "$2"
	fi
}

set_lang(){
	echo $LNG > $HOME/.config/user-dirs.locale
}

escape(){
	echo -n "$1" | perl -pe's/([^-_.~A-Za-z0-9])/sprintf("%%%02X", ord($1))/seg'
}

escape_stdin(){
	perl -pe's/([^-_.~A-Za-z0-9%:])/sprintf("%%%02X", ord($1))/seg' |sed 's#%2F#/#g;s#%0A#\n#g;s#%3A#:#g'
}

modify_bookmark(){
	NEW_STR="$(echo -n "file://$HOME/$(LANGUAGE="$LNG" gettext "$1")" |escape_stdin)"
	OLD_STR="$(echo -n "file://$2" |escape_stdin)"
	cat "$HOME/.gtk-bookmarks" |escape_stdin |grep -vF  "$OLD_STR" > "$HOME/.gtk-bookmarks.tmp" 
	echo "$NEW_STR" >> "$HOME/.gtk-bookmarks.tmp"
	mv -f "$HOME/.gtk-bookmarks.tmp"  "$HOME/.gtk-bookmarks"
}

create_trash(){
	ALTERN=$(readlink /etc/alternatives/x-session-manager)
	if [ "$GDMSESSION" = "LXDE" -o "$DESKTOP_SESSION" = "LXDE" -o "$ALTERN" = "/usr/bin/startlxde" ]; then
		if [ ! -d "$HOME/Desktop" ]; then
			mkdir "$HOME/Desktop"
		fi
		if [ ! -e "$HOME/Desktop/pcmanfm-trash.desktop" ]; then
			cp /usr/share/pcmanfm/pcmanfm-trash.desktop "$HOME/Desktop/"
		fi
	fi
	if  [ "$GDMSESSION" = "gnome" -o "$DESKTOP_SESSION" = "gnome" ]; then
			rm -f "$HOME/Desktop/pcmanfm-trash.desktop"
	fi
}

create_userfiles_directories()
{
	# Check all /etc/skel/UserFiles subdirectories
	# and create on $HOME/UserFiles if needed.
	[ -d "$USER_FILES_TOKEN_DIR" ] || mkdir -p "$USER_FILES_TOKEN_DIR"
	for d in $USER_FILES_DIRS ; do
		if [ ! -e "$USER_FILES_TOKEN_DIR/${d}.done" ] ; then
			mkdir -p "$USER_FILES/$d"
			touch "$USER_FILES_TOKEN_DIR/${d}.done"
		fi
	done
	
}


# ################ Main ###################

# check if NET_MOUNTED_DIR is mounted
df |grep -q "[[:blank:]]${NET_MOUNTED_DIR}$" || exit 0

create_userfiles_directories

[ -f "$HOME/.config/user-dirs.dirs" ] || create_user_dirs

. $HOME/.config/user-dirs.dirs

#Create net UserFiles for users with local home but they are net users
# NOT IN AUREX !!!!!
# netUserFiles

update_link Desktop $XDG_DESKTOP_DIR
update_link Downloads $XDG_DOWNLOAD_DIR
update_link Templates $XDG_TEMPLATES_DIR
update_link Public $XDG_PUBLICSHARE_DIR
update_link Documents $XDG_DOCUMENTS_DIR
update_link Music $XDG_MUSIC_DIR
update_link Pictures $XDG_PICTURES_DIR
update_link Videos $XDG_VIDEOS_DIR

# AUREX: put all in UserFiles 
#LLX_XDG_LINKS_NONUSERFILES="$XDG_DOWNLOAD_DIR"
#remove_old_links "${LLX_XDG_LINKS_NONUSERFILES}"

#create_nonuserfiles_link Downloads "$XDG_DOWNLOAD_DIR"

# update for new lang
create_user_dirs
set_lang

# pcmanfm trash not required in AUREX
#create_trash


exit 0
